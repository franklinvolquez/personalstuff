<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:buttons="fr.kapit.lab.demo.buttons.*"
		 xmlns:components="fr.kapit.lab.demo.menubar.components.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:forms="fr.kapit.lab.demo.forms.*" xmlns:message="fr.kapit.lab.demo.ui.components.message.*"
		 >

	<fx:Library>
		<fx:Definition name="SeparatorLine">
			<s:Group width="1" height="30">
				<s:Rect width="0" height="30">
				   <s:stroke>
					   <s:SolidColorStroke color="#cccccc"/>
				   </s:stroke>
				</s:Rect>
			</s:Group>
		</fx:Definition>
	</fx:Library>

	<fx:Script>
	<![CDATA[
		import fr.kapit.lab.demo.forms.events.SearchAreaEvent;
		import fr.kapit.lab.demo.model.ApplicationModel;

		[Embed(source='fr/kapit/datavisualization/assets/forms/pause.png')]
		protected var _pauseIcon:Class;
		[Embed(source='fr/kapit/datavisualization/assets/forms/play.png')]
		protected var _playIcon:Class;
		[Embed(source='fr/kapit/datavisualization/assets/forms/reload.png')]
		[Bindable]
		protected var reloadIcon:Class;
		
		[Bindable]
		public var playPauseIcon:Class = _pauseIcon;
		[Bindable]
		public var model:ApplicationModel;

		[Bindable]
		private var _paused:Boolean = false;
		public function set paused(value:Boolean):void
		{
			_paused = value;
			playPauseIcon = _paused ? _playIcon : _pauseIcon;
			model.visualizerModel.enableSelectionDrag = _limitReached || _paused;
		}
		
		public function set limitReached(value:Boolean):void
		{
			_limitReached = value;
			model.visualizerModel.enableSelectionDrag = _limitReached || _paused;
		}
		[Bindable]
		private var _limitReached:Boolean = true;

		protected function pause_clickHandler(event:Event):void
		{
			if (_paused)
			{
				model.mainView.twitterManager.resume();
			}
			else
			{
				model.mainView.twitterManager.pause();
			}

			paused = !_paused;
		}

		protected function restart_clickHandler(event:Event):void
		{
			model.mainView.twitterManager.restart();
			paused = false;
		}
		
		protected function searchInput_searchTextValidatedHandler(event:SearchAreaEvent):void
		{
			performSearch();
		}
		
		protected function searchInput_searchTextChangedHandler(event:SearchAreaEvent):void
		{
			performSearch();
		}
		protected function performSearch():void
		{
			if (searchInput.searchText && searchInput.searchText.length>0)
			{
				model.searchTag = searchInput.searchText;
				model.mainView.twitterManager.search(searchInput.searchText);
			}
			else
			{
				model.mainView.twitterManager.getTrends();
			}
			paused = false;
		}
	]]>
	</fx:Script>

	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xB3B3B3" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xF2F2F2" />
		</s:fill>
	</s:Rect>

	<s:HGroup height="100%" width="100%" verticalAlign="middle" horizontalAlign="center" gap="10">

		<forms:SearchArea  id="searchInput" width="200" height="100%" paddingBottom="5" paddingTop="5"
						   searchTextValidated="searchInput_searchTextValidatedHandler(event)"
						   searchTextChanged="searchInput_searchTextChangedHandler(event)"/>

		<fx:SeparatorLine />
		
		<buttons:Button width="40" height="30"
						icon="{reloadIcon}"
						click="restart_clickHandler(event)"
						/>
		<buttons:Button width="40" height="30"
						enabled="{!_limitReached}" icon="{playPauseIcon}"
						click="pause_clickHandler(event)"
						/>
		<message:MessageLoadingComponent loadingMessage="waiting for twitter" 
										 loadedMessage="receiving data"
										 loadingState="{model.twitterCallState}" 
										 width="0"/>

	</s:HGroup>
</s:Group>
